# libtcod makefile
# to build debug version, run "make -f makefile-linux debug"
# to build release version, run "make -f makefile-linux release"

# Paths
SRCDIR=src
INCDIR=include
TMPDIR=/tmp
OUTDIR=$(TMPDIR)/libtcod

# Dependencies
# SDL
SDL_FLAGS=`sdl2-config --cflags`
SDL_LIBS=`sdl2-config --libs`
# ZLIB
ZLIB_FLAGS=-I src/zlib
ZLIB_LIB=$(OUTDIR)/zlib/libz.a
#OPENGL
OPENGL_LIB=-lGL

# Libraries
LIBS=$(ZLIB_LIB) $(SDL_LIBS) $(OPENGL_LIB) -lm -ldl -lX11 -lpthread

# Compiler Flags
FLAGS_COMMON=-fPIC -fno-strict-aliasing -Wall -Werror
CFLAGS=$(FLAGS_COMMON) -std=c99
CXXFLAGS=$(FLAGS_COMMON)

# Preprocessor Flags
CPPFLAGS=-I$(INCDIR) -I$(INCDIR)/gui $(SDL_FLAGS) $(ZLIB_FLAGS) -DTCOD_SDL2 -DNO_OPENGL

# Compilers
CC=gcc
CXX=g++

# Automake specifications
.SUFFIXES: a .o .h .c


$(OUTDIR)/release/%.o : $(SRCDIR)/%.c
	@ echo Compiling release $(basename $<).c
	@$(CC) $(CPPFLAGS) $(CFLAGS) -O2 -DNDEBUG -s -o $@ -c $<
$(OUTDIR)/release/%.o : $(SRCDIR)/%.cpp
	@ echo Compiling release $(basename $<).cpp
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -O2 -DNDEBUG -s -o $@ -c $<
$(OUTDIR)/release/gui/%.o : $(SRCDIR)/gui/%.cpp
	@ echo Compiling release $(basename $<).cpp
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -O2 -DNDEBUG -s -o $@ -c $<
$(OUTDIR)/debug/%.o : $(SRCDIR)/%.c
	@echo Compiling debug $(basename $<).c
	@$(CC) $(CPPFLAGS) $(CFLAGS) -g -o $@ -c $<
$(OUTDIR)/debug/%.o : $(SRCDIR)/%.cpp
	@echo Compiling debug $(basename $<).cpp
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -g -o $@ -c $<
$(OUTDIR)/debug/gui/%.o : $(SRCDIR)/gui/%.cpp
	@echo Compiling debug $(basename $<).cpp
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -g -o $@ -c $<
$(OUTDIR)/zlib/%.o : $(SRCDIR)/zlib/%.c
	@ echo Compiling zlib $(basename $<).c
	@$(CC) $(CPPFLAGS) $(CFLAGS) -DNDEBUG -O2 -s -o $@ -c $<

ZLIBOBJS=$(addprefix $(OUTDIR)/zlib/, \
	adler32.o \
	crc32.o \
	deflate.o \
	infback.o \
	inffast.o \
	inflate.o \
	inftrees.o \
	trees.o \
	zutil.o \
	compress.o \
	uncompr.o \
	gzclose.o \
	gzlib.o \
	gzread.o \
	gzwrite.o )

LIBOBJS_C= \
	bresenham_c.o \
	bsp_c.o \
	color_c.o \
	console_c.o \
	fov_c.o \
	fov_circular_raycasting.o \
	fov_diamond_raycasting.o \
	fov_recursive_shadowcasting.o \
	fov_permissive2.o \
	fov_restrictive.o \
	heightmap_c.o \
	image_c.o \
	lex_c.o \
	list_c.o \
	mersenne_c.o \
	noise_c.o \
	parser_c.o \
	path_c.o \
	sys_c.o \
	sys_sdl_c.o \
	sys_sdl2_c.o \
	sys_sdl_img_bmp.o \
	sys_sdl_img_png.o \
	sys_opengl_c.o \
	tree_c.o \
	txtfield_c.o \
	wrappers.o \
	zip_c.o \
	namegen_c.o \
	png/lodepng.o

LIBOBJS_CXX= \
	bresenham.o \
	bsp.o \
	color.o \
	console.o \
	fov.o \
	heightmap.o \
	image.o \
	lex.o \
	mersenne.o \
	mouse.o \
	noise.o \
	parser.o \
	path.o \
	sys.o \
	txtfield.o \
	zip.o \
	namegen.o

GUIOBJS= \
	gui/button.o \
	gui/container.o \
	gui/flatlist.o \
	gui/hbox.o \
	gui/image.o \
	gui/label.o \
	gui/radiobutton.o \
	gui/slider.o \
	gui/statusbar.o \
	gui/textbox.o \
	gui/togglebutton.o \
	gui/toolbar.o \
	gui/vbox.o \
	gui/widget.o


LIBOBJS_C_DEBUG=$(addprefix $(OUTDIR)/debug/, $(LIBOBJS_C))
LIBOBJS_CXX_DEBUG=$(addprefix $(OUTDIR)/debug/, $(LIBOBJS_CXX))
GUIOBJS_DEBUG=$(addprefix $(OUTDIR)/debug/, $(GUIOBJS))
LIBOBJS_C_RELEASE=$(addprefix $(OUTDIR)/release/, $(LIBOBJS_C))
LIBOBJS_CXX_RELEASE=$(addprefix $(OUTDIR)/release/, $(LIBOBJS_CXX))
GUIOBJS_RELEASE=$(addprefix $(OUTDIR)/release/, $(GUIOBJS))

all : debug release

debug : libtcod_debug.so libtcodxx_debug.so libtcodgui_debug.so

release : libtcod.so libtcodxx.so libtcodgui.so

$(OUTDIR)/debug/png :
	mkdir -p $@

$(OUTDIR)/debug/gui :
	mkdir -p $@

$(OUTDIR)/release/png :
	mkdir -p $@

$(OUTDIR)/release/gui :
	mkdir -p $@

$(OUTDIR)/zlib :
	@mkdir -p $@

libtcod.a : $(LIBOBJS_C_DEBUG)
	ar r $@ $(LIBOBJS_C_DEBUG)

$(ZLIB_LIB) : $(OUTDIR)/zlib $(ZLIBOBJS)
	@ar r $@ $(ZLIBOBJS)

libtcodxx.a : $(LIBOBJS_CXX_DEBUG)
	ar r $@ $(LIBOBJS_CXX_DEBUG)

libtcod.so : $(OUTDIR)/release/png $(LIBOBJS_C_RELEASE) $(ZLIB_LIB)
	@echo Linking $@
	@$(CC) -shared -Wl,-soname,libtcod.so.1 $(LDFLAGS) -o $@ $(LIBOBJS_C_RELEASE) $(LIBS) $(CPPFLAGS) $(CFLAGS)

libtcodxx.so : $(OUTDIR)/release/png $(LIBOBJS_CXX_RELEASE)
	@echo Linking $@
	@$(CXX) -shared -Wl,-soname,libtcodxx.so.1 $(LDFLAGS) -o $@ $(LIBOBJS_CXX_RELEASE) -L. -ltcod $(CPPFLAGS) $(CXXFLAGS)

libtcodgui.so : $(OUTDIR)/release/gui $(GUIOBJS_RELEASE)
	@echo Linking $@
	@$(CXX) -shared -Wl,-soname,libtcodgui.so.1 $(LDFLAGS) -o $@ $(GUIOBJS_RELEASE) -L. -ltcod -ltcodxx $(CPPFLAGS) $(CXXFLAGS)

libtcod_debug.so : $(OUTDIR)/debug/png $(LIBOBJS_C_DEBUG) $(ZLIB_LIB)
	@echo Linking $@
	@$(CC) -shared -Wl,-soname,$@ $(LDFLAGS) -o $@ $(LIBOBJS_C_DEBUG) $(LIBS) $(CPPFLAGS) $(CFLAGS)

libtcodxx_debug.so : $(OUTDIR)/debug/png $(LIBOBJS_CXX_DEBUG)
	@echo Linking $@
	@$(CXX) -shared -Wl,-soname,$@ $(LDFLAGS) -o $@ $(LIBOBJS_CXX_DEBUG) -L. -ltcod_debug $(CPPFLAGS) $(CXXFLAGS)

libtcodgui_debug.so : $(OUTDIR)/debug/gui $(GUIOBJS_DEBUG)
	@echo Linking $@
	@$(CXX) -shared -Wl,-soname,$@ $(LDFLAGS) -o $@ $(GUIOBJS_DEBUG) -L. -ltcod_debug -ltcodxx_debug $(CPPFLAGS) $(CXXFLAGS)

clean :
	\rm -f \
		$(LIBOBJS_C_RELEASE) \
		$(LIBOBJS_CXX_RELEASE) \
		$(GUIOBJS_RELEASE) \
	   	$(LIBOBJS_C_DEBUG) \
	   	$(LIBOBJS_CXX_DEBUG) \
	   	$(GUIOBJS_DEBUG) \
	   	libtcod.a \
	   	libtcodxx.a \
	   	libtcod.so \
	   	libtcodxx.so \
	   	libtcodgui.so \
	   	libtcod_debug.so \
	   	libtcodxx_debug.so \
	   	libtcodgui_debug.so \
	   	libtcodpy.pyc

cleanall : clean
	@rm -f \
		$(ZLIBOBJS) \
		$(ZLIB_LIB)
